# -*- coding: utf-8 -*-
"""Untitled5.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1dGTSCU_9tqutmzMDYrrL0cU73IgFuYKE
"""

!unzip  "0664343c9a8f11ea.zip"

import pandas as pd
train = pd.read_csv('dataset/train.csv')
test = pd.read_csv('dataset/test.csv')
print(train.head())

from fastai.imports import *
from fastai import *
from fastai.vision import *
from torchvision.models import *

path = 'dataset/'
test_path = path+'test/'

tfms = get_transforms(do_flip = True, max_lighting = 0.2, max_zoom= 1.1, max_warp = 0.15, max_rotate = 45)
data = ImageDataBunch.from_csv(path, folder= 'train/', 
                              valid_pct = 0.0,
                              csv_labels = 'train.csv',
                              ds_tfms = tfms, 
                              fn_col = 'Image',
                              #test = 'train_SOaYf6m/images', 
                              label_col = 'target',
                              bs = 8,
                              size = 564).normalize(imagenet_stats)

fbeta = FBeta(average='weighted', beta = 1)
learn = cnn_learner(data, models.resnet101, metrics=[accuracy, fbeta])

import gc
del data
gc.collect()

import warnings
warnings. filterwarnings('ignore')
learn.fit(epochs = 30, lr = 1e-3)
learn1 = cnn_learner(data, models.resnet50, metrics=[accuracy, fbeta])
learn1.fit(epochs = 30, lr = 1e-3)
learn2 = cnn_learner(data, models.densenet121, metrics=[accuracy, fbeta])
learn2.fit(epochs = 30, lr = 1e-3)

learn3 = cnn_learner(data, models.densenet161, metrics=[accuracy, fbeta])
learn3.fit(epochs = 30, lr = 1e-3)
learn4 = cnn_learner(data, models.resnet152, metrics=[accuracy, fbeta])
learn4.fit(epochs = 30, lr = 1e-3)
generateSubmission(learn)

learn1 = cnn_learner(data, models.resnet50, metrics=[accuracy, fbeta])
learn1.fit(epochs = 50, lr = 1e-3)

learn2 = cnn_learner(data, models.densenet121, metrics=[accuracy, fbeta])
learn2.fit(epochs = 50, lr = 6e-5)

learn3 = cnn_learner(data, models.densenet161, metrics=[accuracy, fbeta])
learn3.fit(epochs = 50, lr = 1e-3)

learn4 = cnn_learner(data, models.resnet152, metrics=[accuracy, fbeta])
learn4.fit(epochs = 25, lr = 5e-5)

path = 'dataset/'
test_path = path+'test/'
def generateSubmission(learn):
    with open('submission.csv',"w") as f:
        f.write('Image,res_101,res_50,dense_121,dense_161,res_152\n')
    id_list=list(test.Image)
    label=[]
    for iname in id_list:
        img=open_image(path+"test/"+iname)
        #label=learn.predict(img)[0]
        
        with open('submission.csv','a') as f:
            f.write(f'{iname},{learn.predict(img)[0]},{learn1.predict(img)[0]},{learn2.predict(img)[0]},{learn3.predict(img)[0]},{learn4.predict(img)[0]}\n')
    
generateSubmission(learn)

df=pd.read_csv('submission.csv')
#print(df.head())
def find_max_mode(list1):
    list_table = statistics._counts(list1)
    len_table = len(list_table)

    if len_table == 1:
        max_mode = statistics.mode(list1)
    else:
        new_list = []
        for i in range(len_table):
            new_list.append(list_table[i][0])
        max_mode = max(new_list) # use the max value here
    return max_mode
dataset=['manipuri','bharatanatyam','odissi','kathakali','kathak','sattriya','kuchipudi','mohiniyattam']
cols=['res_101','res_50' , 'dense_121'  ,   'dense_161'   ,     'res_152']
for iter,rows in enumerate(df.Image):
    for col in cols:
        for counter,sets in enumerate(dataset):
            if df[col][iter]==sets:
                df[col][iter]=counter
import statistics
#print(df.head())
df['target']=0
print(df.head())
for count,rows in enumerate(df.Image):
    df['target'][count]=dataset[find_max_mode( np.array([df.res_50[count],df.dense_121[count],df.dense_161[count],df.res_152[count]]))]
    print(df['target'][count])
import pandas as pd
for col in cols:
    df.drop([col],1,inplace=True)
#print(df.head())
df.to_csv('finalsubmit.csv',index=False)
print(df.head())
